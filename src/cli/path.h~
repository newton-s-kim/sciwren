#ifndef path_h
#define path_h

// Path manipulation functions.

typedef struct {
    const char* start;
    const char* end;
} Slice;

class Path {
private:
    // Dynamically allocated array of characters.
    char* chars;

    // The number of characters currently in use in [chars], not including the
    // null terminator.
    size_t length;

    // Size of the allocated [chars] buffer.
    size_t capacity;


private:
    void ensureCapacity(size_t capacity);
    void appendSlice(Slice slice);


public:
    Path(Path& path);
    // Creates a new empty path.
    Path(const char* path);
    // Releases the method associated with [path].
    ~Path();

    // Strips off the last component of the path name.
    void dirName(void);

    // Strips off the file extension from the last component of the path.
    void removeExtension(void);

    // Appends [string] to [path].
    void join(const char* string);

    // Appends [c] to the path, growing the buffer if needed.
    void appendChar(char c);

    // Appends [string] to the path, growing the buffer if needed.
    void appendString(const char* string);

    // Simplifies the path string as much as possible.
    //
    // Applies and removes any "." or ".." components, collapses redundant "/"
    // characters, and normalizes all path separators to "/".
    void normalize(void);

    // Allocates a new string exactly the right length and copies this path to it.
    char* toString(bool duplicate = true);

    bool isDirectory(void);
};

// Categorizes what form a path is.
typedef enum {
    // An absolute path, starting with "/" on POSIX systems, a drive letter on
    // Windows, etc.
    PATH_TYPE_ABSOLUTE,

    // An explicitly relative path, starting with "./" or "../".
    PATH_TYPE_RELATIVE,

    // A path that has no leading prefix, like "foo/bar".
    PATH_TYPE_SIMPLE,
} PathType;

PathType pathType(const char* path);

#endif
